// @vx/NOTE: GENERATE BY vx/scripts/apps/config-mocks.ts DO NOT EDIT THIS FILE DIRECTLY

import clone from 'clone'
import 'dotenv/config'
import jsonServer from 'json-server'
// import pluralize from 'pluralize'

import data_db from '../data/db.json' with { type: 'json' }
import data_routes from '../data/routes.json' with { type: 'json' }

const middlewares = jsonServer.defaults({
  logger: process.env.NODE_ENV !== 'production'
})

const rewrites = jsonServer.rewriter(data_routes)
const router = jsonServer.router(clone(data_db), { _isFake: true }) // { foreignKeySuffix: 'Id' }
const app = jsonServer.create()

// urls
app.use('/heartbeat', (req, res) => {
  return res.status(200).json({ status: true })
})

app.use('*', (req, res, next) => {
  if (req.originalUrl === '/') {
    return res.status(200).send('Welcome to Mock Server!...')
  }

  router.db.setState(clone(data_db))
  next()
})

// middlewares | config, logger, ...
app.use(middlewares)
app.use(rewrites)
app.use(router)

// router | custom response config
router.render = function (req, res) {
  const meta_success = {
    code: 200,
    i18n_key: 'operation_success',
    message: 'request processed successfully',
    request_id: '93830932-32a3-4781-8cbd-270ab0ebaaf2',
    status: 'success'
  }

  const meta_error_id = {
    code: 404,
    i18n_key: 'bad_request',
    message: 'invalid url',
    request_id: 'bf081e6a-5243-4246-807b-696d56339394',
    status: 'failed'
  }
  const meta_error_list = {
    code: 404,
    i18n_key: 'bad_request',
    message: 'invalid url',
    request_id: 'bf081e6a-5243-4246-807b-696d56339394',
    status: 'failed'
  }

  const data = res.locals.data
  let data_type = typeof data
  if (Array.isArray(data)) {
    data_type = 'array'
  }

  const parsed_res = {}
  if (data_type === 'object' && Object.keys(data).length === 0) {
    parsed_res.meta = meta_error_id
  } else if (data_type === 'array' && data.length === 0) {
    parsed_res.meta = meta_error_list
  } else {
    parsed_res.meta = meta_success
    parsed_res.data = data

    if (data_type === 'array') {
      parsed_res.pagination = {
        cursors: {
          first:
            'eyJwYWdlIjoxLCJwZXJfcGFnZSI6MTAsInN5bmNfdGltZSI6IjIwMjMtMDItMjBUMDM6MjQ6MzQuODc5ODY0KzA1OjMwIn0=',
          next: 'eyJwYWdlIjoyLCJwZXJfcGFnZSI6MTAsInN5bmNfdGltZSI6IjIwMjMtMDItMjBUMDM6MjQ6MzQuODc5ODY0KzA1OjMwIn0='
        },
        page: '1',
        per_page: '1',
        sync_time: '2023-02-23T02:06:13+05:30'
      }
    }
  }

  res.jsonp(parsed_res)
}

// If you want to target /posts specifically
// router.render = function (req, res) {
//   if (req.url === '/posts') {
//     res.jsonp({
//       data: res.locals.data
//     })
//   } else {
//     res.jsonp(res.locals.data)
//   }
// }

// Or /resources in general
// router.render = function (req, res) {
//   if (req.method === 'GET' && !req.params.id) {
//     var obj = {}
//     obj[req.params.resource] = res.locals.data
//     res.jsonp(obj)
//   } else {
//     res.jsonp(res.locals.data)
//   }
// }

// ---
// router.render = function (req, res) {
//   var path = req.url.replace(/\/$/, '')
//   var resourceName = path.split('/')[1] // To get the resource, /people, /posts/
//   var last = path.split('/').pop() // To check if the path is resourceName or ID
//   var statusCode = res.statusCode
//   var json = {}

//   if (statusCode < 400) {
//     var key = resourceName == last ? resourceName : pluralize.singular(resourceName)
//     json[key] = res.locals.data
//   }
//   json.status = { code: statusCode }

//   res.jsonp(json)
// }

export { app }
